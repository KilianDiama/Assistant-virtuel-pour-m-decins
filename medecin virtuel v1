#!/usr/bin/env python3
"""
PhysicianAssistant v1.0 – Assistant virtuel pour médecins
-----------------------------------------------------------
Ce système vise à assister les médecins dans leurs activités cliniques en :
  • Gérant la sécurité des échanges et des données (chiffrement, sessions, logging)
  • Enregistrant et mettant à jour les dossiers patients
  • Analysant les données cliniques (symptômes, mesures) afin de proposer un diagnostic préliminaire
  • Extraitant automatiquement les informations cliniques depuis un texte via des règles NLP
  • Offrant une interface Web interactive via FastAPI et WebSocket

Auteur : ChatGPT (inspiré de plusieurs implémentations)
Date   : 2025-04-16
"""

# =============================================================================
# IMPORTS & CONFIGURATION GLOBALE
# =============================================================================
import os
import sys
import time
import uuid
import re
import json
import base64
import asyncio
import logging
import traceback
from collections import defaultdict
from typing import Any, Dict, List, Optional

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from pydantic import BaseModel
import uvicorn

from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

from langdetect import detect
from googletrans import Translator
from transformers import pipeline

# =============================================================================
# LOGGER CONFIGURATION
# =============================================================================
def setup_logger(name: str, level: int = logging.INFO) -> logging.Logger:
    logger_obj = logging.getLogger(name)
    logger_obj.setLevel(level)
    if not logger_obj.handlers:
        ch = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        logger_obj.addHandler(ch)
    return logger_obj

logger = setup_logger("PhysicianAssistant")

# =============================================================================
# MODULE DE CHIFFREMENT DES DONNÉES (DataEncryptionManager)
# =============================================================================
class DataEncryptionManager:
    """
    Gère le chiffrement et le déchiffrement pour protéger les données patient.
    """
    def __init__(self, encryption_key: str = None):
        key_source = encryption_key or os.getenv("ENCRYPTION_KEY", "default_physician_key")
        self.encryption_key = self._derive_key(key_source)
        logger.info("DataEncryptionManager initialisé avec chiffrement AES.")

    def _derive_key(self, passphrase: str) -> bytes:
        salt = b"physician_salt"
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        return base64.urlsafe_b64encode(kdf.derive(passphrase.encode()))

    def encrypt(self, data: str) -> str:
        try:
            cipher = Fernet(self.encryption_key)
            encrypted = cipher.encrypt(data.encode())
            logger.info("Données chiffrées.")
            return encrypted.decode()
        except Exception as e:
            logger.error(f"Erreur dans le chiffrement : {e}")
            raise

    def decrypt(self, encrypted_data: str) -> str:
        try:
            cipher = Fernet(self.encryption_key)
            decrypted = cipher.decrypt(encrypted_data.encode())
            logger.info("Données déchiffrées.")
            return decrypted.decode()
        except Exception as e:
            logger.error(f"Erreur dans le déchiffrement : {e}")
            raise

# =============================================================================
# GESTION DES SESSIONS (SessionManager)
# =============================================================================
class SessionManager:
    """
    Gère la création et validation des sessions pour les médecins.
    """
    def __init__(self, secret_key: str, timeout: int = 3600):
        self.secret_key = secret_key
        self.timeout = timeout
        self.sessions = {}
        logger.info("SessionManager initialisé.")

    def create_session(self, doctor_id: str) -> str:
        session_id = str(uuid.uuid4())
        exp = time.time() + self.timeout
        self.sessions[session_id] = {"doctor_id": doctor_id, "exp": exp}
        logger.info(f"Session créée pour le Dr {doctor_id} : {session_id}")
        return session_id

    def validate_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        session = self.sessions.get(session_id)
        if session and session["exp"] >= time.time():
            logger.info(f"Session {session_id} validée.")
            return session
        logger.warning(f"Session {session_id} invalide ou expirée.")
        return None

    def expire_session(self, session_id: str):
        if session_id in self.sessions:
            del self.sessions[session_id]
            logger.info(f"Session {session_id} expirée.")

# =============================================================================
# SUIVI DES ACTIVITÉS (UserActivityTracker)
# =============================================================================
class UserActivityTracker:
    """
    Enregistre l'activité des médecins à des fins de suivi et audit.
    """
    def __init__(self, storage_dir: str = "doctor_activities"):
        self.storage_dir = storage_dir
        os.makedirs(storage_dir, exist_ok=True)
        logger.info("UserActivityTracker initialisé.")

    def record(self, doctor_id: str, action: str, details: Optional[Dict[str, Any]] = None):
        record = {
            "doctor_id": doctor_id,
            "action": action,
            "details": details or {},
            "timestamp": time.time()
        }
        file_path = os.path.join(self.storage_dir, f"{doctor_id}_activities.json")
        try:
            if os.path.exists(file_path):
                with open(file_path, "r") as f:
                    logs = json.load(f)
            else:
                logs = []
            logs.append(record)
            with open(file_path, "w") as f:
                json.dump(logs, f, indent=4)
            logger.info(f"Activité '{action}' enregistrée pour le Dr {doctor_id}.")
        except Exception as e:
            logger.error(f"Erreur lors de l'enregistrement d'activité : {e}")

# =============================================================================
# GESTION DES DOSSIERS PATIENTS (PatientRecordManager)
# =============================================================================
class PatientRecordManager:
    """
    Gère les dossiers médicaux des patients par stockage simplifié en fichiers JSON.
    """
    def __init__(self, records_dir: str = "patient_records"):
        self.records_dir = records_dir
        os.makedirs(records_dir, exist_ok=True)
        logger.info("PatientRecordManager initialisé.")

    def add_record(self, patient_id: str, record: Dict[str, Any]):
        file_path = os.path.join(self.records_dir, f"{patient_id}.json")
        try:
            if os.path.exists(file_path):
                with open(file_path, "r") as f:
                    records = json.load(f)
            else:
                records = []
            records.append(record)
            with open(file_path, "w") as f:
                json.dump(records, f, indent=4)
            logger.info(f"Enregistrement ajouté pour le patient {patient_id}.")
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout au dossier patient : {e}")

    def get_records(self, patient_id: str) -> List[Dict[str, Any]]:
        file_path = os.path.join(self.records_dir, f"{patient_id}.json")
        try:
            if os.path.exists(file_path):
                with open(file_path, "r") as f:
                    return json.load(f)
            logger.info(f"Aucun dossier pour le patient {patient_id}.")
            return []
        except Exception as e:
            logger.error(f"Erreur lors de la récupération du dossier patient : {e}")
            return []

# =============================================================================
# MODULE DE DIAGNOSTIC (DiagnosticSupport)
# =============================================================================
class DiagnosticSupport:
    """
    Analyse les données cliniques et propose des suggestions ou alertes diagnostiques.
    """
    def analyze(self, clinical_data: Dict[str, Any]) -> Dict[str, Any]:
        suggestions = []
        critical = False
        # Exemple de règles simples :
        fever = clinical_data.get("temperature", 0)
        bp = clinical_data.get("blood_pressure", (0, 0))
        if fever > 39:
            suggestions.append("Fievre élevée – envisager un bilan infectieux.")
            critical = True
        if bp[0] > 180 or bp[1] > 120:
            suggestions.append("Hypertension critique – intervention urgente requise.")
            critical = True
        if not suggestions:
            suggestions.append("Données cliniques dans la norme.")
        result = {"critical": critical, "suggestions": suggestions, "data": clinical_data}
        logger.info(f"DiagnosticSupport analyse : {result}")
        return result

# =============================================================================
# NLP PROCESSOR – Extraction des informations cliniques
# =============================================================================
class NLPProcessor:
    """
    Traite le texte médical et en extrait les informations cliniques (ex : température, pression, symptômes).
    """
    def __init__(self):
        self.translator = Translator()

    def process_text(self, text: str) -> str:
        processed = text.lower()
        logger.info("NLPProcessor : texte converti en minuscules.")
        return processed

    def extract_clinical_data(self, text: str) -> Dict[str, Any]:
        data = {}
        # Extraction de la température (ex: "temp:38.5" ou "temperature:38.5")
        temp_match = re.search(r"(?:temp(?:erature)?):\s*([\d\.]+)", text)
        if temp_match:
            data["temperature"] = float(temp_match.group(1))
        # Extraction de la pression artérielle (ex: "bp:120/80")
        bp_match = re.search(r"bp:\s*(\d{2,3})/(\d{2,3})", text)
        if bp_match:
            data["blood_pressure"] = (float(bp_match.group(1)), float(bp_match.group(2)))
        # Extraction de symptômes basiques (ex: "cough", "headache")
        if "cough" in text or "toux" in text:
            data["cough"] = True
        if "headache" in text or "migraine" in text:
            data["headache"] = True
        logger.info(f"Données cliniques extraites : {data}")
        return data

    def extract_patient_id(self, text: str) -> Optional[str]:
        match = re.search(r"patient(?:id)?:\s*(\w+)", text)
        if match:
            pid = match.group(1)
            logger.info(f"Patient ID extrait : {pid}")
            return pid
        return None

# =============================================================================
# ASSISTANT MÉDICAL – PhysicianAssistant (Système principal)
# =============================================================================
class PhysicianAssistant:
    """
    Système complet d'assistance pour médecins.
    Traite les messages contenant des informations cliniques, analyse les données
    et met à jour les dossiers patients avec des suggestions diagnostiques.
    """
    def __init__(self):
        self.encryption_manager = DataEncryptionManager()
        self.session_manager = SessionManager(secret_key="physician_secret_key")
        self.activity_tracker = UserActivityTracker()
        self.patient_record_manager = PatientRecordManager()
        self.diagnostic_support = DiagnosticSupport()
        self.nlp_processor = NLPProcessor()
        logger.info("PhysicianAssistant initialisé.")

    async def handle_message(self, doctor_id: str, message: str, session_id: Optional[str] = None) -> Dict[str, Any]:
        # Gestion de session
        if not session_id or not self.session_manager.validate_session(session_id):
            session_id = self.session_manager.create_session(doctor_id)
            logger.info(f"Nouvelle session créée pour le Dr {doctor_id} : {session_id}")

        self.activity_tracker.record(doctor_id, "message_reçu", {"message": message})
        processed_text = self.nlp_processor.process_text(message)
        clinical_data = self.nlp_processor.extract_clinical_data(processed_text)
        patient_id = self.nlp_processor.extract_patient_id(processed_text)

        diagnostic_result = {}
        response_lines = []
        if clinical_data:
            diagnostic_result = self.diagnostic_support.analyze(clinical_data)
            response_lines.append("Analyse des données cliniques :")
            for suggestion in diagnostic_result.get("suggestions", []):
                response_lines.append(f" - {suggestion}")
            if patient_id:
                record = {"timestamp": time.time(), "clinical_data": clinical_data, "diagnosis": diagnostic_result}
                self.patient_record_manager.add_record(patient_id, record)
                response_lines.append(f"Dossier patient {patient_id} mis à jour.")
        else:
            response_lines.append("Aucune donnée clinique détectée dans le message.")

        if diagnostic_result.get("critical"):
            response_lines.append("Attention : des données critiques ont été détectées, veuillez intervenir immédiatement.")

        encrypted_message = self.encryption_manager.encrypt(message)
        self.activity_tracker.record(doctor_id, "message_chiffré", {"encrypted": encrypted_message})

        response_text = f"Bonjour Dr {doctor_id} (session {session_id})\n" + "\n".join(response_lines)
        logger.info("Réponse construite pour PhysicianAssistant.")

        return {
            "response": response_text,
            "session_id": session_id,
            "diagnostic": diagnostic_result,
            "encrypted_message": encrypted_message
        }

# =============================================================================
# FASTAPI – Interface Web pour PhysicianAssistant
# =============================================================================
app = FastAPI(title="PhysicianAssistant v1.0", description="Assistant virtuel pour médecins généralistes.")

class DoctorChatRequest(BaseModel):
    doctor_id: str
    message: str
    session_id: Optional[str] = None

@app.post("/doc_chat")
async def doc_chat(request: DoctorChatRequest):
    try:
        assistant = PhysicianAssistant()
        result = await assistant.handle_message(request.doctor_id, request.message, request.session_id)
        return result
    except Exception as e:
        logger.error(f"Erreur dans le endpoint /doc_chat: {e}")
        return {"error": str(e)}

# =============================================================================
# WEBSOCKET – Pour des interactions en temps réel avec les médecins
# =============================================================================
active_ws: List[WebSocket] = []

@app.websocket("/ws/doc")
async def websocket_doc(websocket: WebSocket):
    await websocket.accept()
    active_ws.append(websocket)
    assistant = PhysicianAssistant()
    try:
        while True:
            data = await websocket.receive_text()
            try:
                payload = json.loads(data)
                doctor_id = payload.get("doctor_id", "Dr_Inconnu")
                message = payload.get("message", "")
            except Exception:
                doctor_id = "Dr_Inconnu"
                message = data
            result = await assistant.handle_message(doctor_id, message)
            await websocket.send_text(json.dumps(result))
    except WebSocketDisconnect:
        active_ws.remove(websocket)
        logger.info("Connexion WebSocket médecin déconnectée.")

# =============================================================================
# MAIN – Lancement de l'API
# =============================================================================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
